"vimrc always overrides on session reload
set sessionoptions-=options

" vim not vi
set nocompatible

filetype plugin indent on

syntax on
set number

" Auto indent
set ai
" Smart indent
set si

" Treats tabs like buffers ... questionable
tab sball

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" This shows what you are typing as a command.
set showcmd

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=

" Visualize tabs
"syntax match Tab /\t/
hi Tab gui=underline guifg=blue ctermbg=blue


" globally use spaces instead of tabs
set expandtab
set ts=4
set sw=4

" Be smart when using tabs ;)
set smarttab

" default character width 100
set tw=120
set colorcolumn=120
set cursorline
set ruler

" Autotrim trailing whitespace on exit
autocmd BufWritePre * %s/\s\+$//e
set wrap
set linebreak
set showbreak=>\ \ \

" Hide the mouse pointer while typing
set mousehide

" Make the command-line completion better
set wildmenu

" Zee greatest shell
set shell=zsh


" TODO: the remaining language specific stuff should be more organized
autocmd FileType c setlocal tw=80 colorcolumn=80 expandtab

" makefiles need tabs
autocmd FileType make setlocal noexpandtab

" Obj-C++
autocmd BufRead,BufNewFile *.mm,*.mpp setlocal cindent filetype=objc++ expandtab

" Ruby
autocmd FileType ruby setlocal  tabstop=2 sw=2 expandtab
autocmd FileType eruby setlocal tabstop=2 sw=2 expandtab

autocmd FileType python setlocal tabstop=4 sw=4 expandtab

" JS and JSON
autocmd FileType javascript setlocal tabstop=4 sw=4 expandtab
autocmd FileType json setlocal tabstop=4 sw=4 expandtab
autocmd BufRead,BufNewFile .eslintrc,.babelrc setlocal filetype=json

" shell
autocmd BufRead,BufNewFile *.sh,*.zsh,*.bash setlocal expandtab ts=4 sw=4

"HTML
autocmd FileType html setlocal tabstop=4 sw=4 expandtab

" C++
autocmd FileType c++ :CCToggle setlocal ts=4 sw=4 expandtab
autocmd BufRead,BufNewFile *.hpp,*.hh set ft=cpp
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_experimental_template_highlight = 1

autocmd BufRead,BufNewFile .clang-format set ft=yaml

" gui settings
 if has("gui_running")
     if has("gui_gtk2")
        set guifont=Consolas\ 14
     elseif has("gui_macvim")
        set guifont=Consolas:h16
     elseif has("gui_win32")
         set guifont=Consolas:h16:cANSI
     endif
 endif

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ",,"
let g:mapleader = ",,"
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

"Plugins
call plug#begin('~/.vim/plugged')
Plug 'tomasr/molokai'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ycm-core/YouCompleteMe'
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
Plug 'pboettch/vim-cmake-syntax'
Plug 'nokobear/vim-colorscheme-edit'
call plug#end()

" Plugin Settings
" disable ycm ask prompt -- insecure runs arbitrary code
let g:ycm_confirm_extra_conf = 0

" auto kill obnoxious preview window
let g:ycm_autoclose_preview_window_after_insertion = 1

" enable
let g:ycm_language_server =
  \ [
  \   {
  \     'name': 'godot',
  \     'filetypes': [ 'gdscript' ],
  \     'port': 6008,
  \     'project_root_files': [ 'project.godot' ]
  \   },
  \   {
  \     'name': 'odin',
  \     'cmdline': [ expand('~/bin/ols') ],
  \     'filetypes': [ 'odin' ],
  \     'project_root_files': [ 'ols.json' ]
  \   }
  \ ]

" the one and only colorscheme I ever use
" color molokai
" Actually I use this one now (I made it myself)
color vibes

let g:airline_theme='base16_monokai'

hi Normal guibg=NONE ctermbg=NONE
set encoding=utf-8

"parens matching is white to see easily
highlight MatchParen ctermfg = 0xffffff
highlight MatchParen guifg = white
highlight MatchParen ctermfg = 0xffffff

" For the meme
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>
